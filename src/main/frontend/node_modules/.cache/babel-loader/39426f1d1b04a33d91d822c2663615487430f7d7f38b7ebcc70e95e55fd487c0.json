{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\eeheu\\\\Documents\\\\15.Lab\\\\10.react\\\\dbs-kbolog\\\\src\\\\main\\\\frontend\\\\src\\\\page\\\\Teampage\\\\Teampage.js\",\n  _s = $RefreshSig$();\nimport styles from \"./Teampage.module.css\";\nimport React, { useEffect, useState } from \"react\";\nimport Footer from \"../../components/_Layout/Footer\";\nimport Calendar from \"react-calendar\";\nimport \"react-calendar/dist/Calendar.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Teampage() {\n  _s();\n  const [team, setTeam] = useState([]);\n  const [backgroundColor, setBackgroundColor] = useState(\"#f0f0f0\");\n  const [gameData, setGameData] = useState([]);\n  const [selectedDate, setSelectedDate] = useState(new Date()); // 달력에서 선택된 날짜\n  const [gamesForSelectedDate, setGamesForSelectedDate] = useState([]); // 선택된 날짜의 경기 정보\n\n  useEffect(() => {\n    fetch(\"/api/my\").then(res => res.json()).then(res => {\n      setTeam(res.rootTeam);\n    }).catch(err => {\n      console.error(\"API fetch error:\", err); // 에러 처리\n    });\n    console.log(team);\n    switch (team.sponsor) {\n      case \"기아\":\n        setBackgroundColor(\"#F73600\"); // 기아의 배경색\n        break;\n      case \"두산\":\n        setBackgroundColor(\"#131230\"); // 두산의 배경색\n        break;\n      case \"삼성\":\n        setBackgroundColor(\"#074CA1\"); // 삼성의 배경색\n        break;\n      default:\n        setBackgroundColor(\"#f0f0f0\");\n      // 기본 배경색\n    }\n  }, [team.sponsor]);\n  useEffect(() => {\n    const selectedDate = new Date();\n\n    // 년, 월, 일만 추출\n    const year = selectedDate.getFullYear();\n    const month = selectedDate.getMonth(); // 월은 0부터 시작하므로 (예: 11월이면 10)\n\n    // 해당 월의 첫 날\n    const sf = new Date(year, month, 1);\n\n    // 해당 월의 마지막 날\n    const sgg = new Date(year, month + 1, 0); // 다음 월의 0일은 이전 월의 마지막 날\n\n    console.log('Start of Month:', sf.toLocaleDateString());\n    console.log('End of Month:', sgg.toLocaleDateString());\n    const startOfMonth = new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1);\n    const endOfMonth = new Date(selectedDate.getFullYear(), selectedDate.getMonth() + 1, 0);\n    console.log(startOfMonth);\n    fetch(`/api/game/${team.teamId}?start=${sf.toLocaleDateString()}&end=${endOfMonth.toISOString()}`).then(res => res.json()).then(data => {\n      if (Array.isArray(data)) {\n        setGameData(data); // 배열이면 그대로 상태에 저장\n      } else {\n        setGameData([]); // 배열이 아니면 빈 배열로 설정\n      } // 서버에서 받은 경기 데이터 저장\n    }).catch(err => console.error(\"Failed to fetch game data:\", err));\n  }, [selectedDate, team.teamId]);\n\n  // 날짜가 선택되었을 때 해당 날짜의 경기 정보를 필터링하여 저장\n  useEffect(() => {\n    const selectedDateString = selectedDate.toISOString().split(\"T\")[0]; // 선택된 날짜의 yyyy-mm-dd 형식\n    const gamesOnSelectedDate = gameData.filter(game => {\n      return game.gameDate === selectedDateString; // 경기가 선택된 날짜와 일치하는지 확인\n    });\n    setGamesForSelectedDate(gamesOnSelectedDate);\n  }, [selectedDate, gameData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.default,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.cropping,\n      style: {\n        backgroundColor: backgroundColor\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.inner,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.title,\n        children: [team.sponsor, \" \\uACBD\\uAE30 \\uC77C\\uC815\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.calendarContainer,\n        children: /*#__PURE__*/_jsxDEV(Calendar, {\n          onChange: setSelectedDate // 날짜 선택 핸들러\n          ,\n          value: selectedDate // 현재 선택된 날짜\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.gameList,\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [selectedDate.toLocaleDateString(), \" \\uACBD\\uAE30\\uB97C \\uD655\\uC778\\uD558\\uC138\\uC694:\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 25\n        }, this), gamesForSelectedDate.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: gamesForSelectedDate.map(game => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [game.homeTeam.teamName, \" vs \", game.awayTeam.teamName, \" - \", game.gameDate]\n          }, game.gameId, true, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 37\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 29\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"\\uC774\\uBC88 \\uB0A0\\uC9DC\\uC5D0\\uB294 \\uACBD\\uAE30\\uAC00 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 9\n  }, this);\n}\n_s(Teampage, \"Mn9dRsFcUr7P91umr8NbUwPixtY=\");\n_c = Teampage;\nvar _c;\n$RefreshReg$(_c, \"Teampage\");","map":{"version":3,"names":["styles","React","useEffect","useState","Footer","Calendar","jsxDEV","_jsxDEV","Teampage","_s","team","setTeam","backgroundColor","setBackgroundColor","gameData","setGameData","selectedDate","setSelectedDate","Date","gamesForSelectedDate","setGamesForSelectedDate","fetch","then","res","json","rootTeam","catch","err","console","error","log","sponsor","year","getFullYear","month","getMonth","sf","sgg","toLocaleDateString","startOfMonth","endOfMonth","teamId","toISOString","data","Array","isArray","selectedDateString","split","gamesOnSelectedDate","filter","game","gameDate","className","default","children","cropping","style","fileName","_jsxFileName","lineNumber","columnNumber","inner","title","calendarContainer","onChange","value","gameList","length","map","homeTeam","teamName","awayTeam","gameId","_c","$RefreshReg$"],"sources":["C:/Users/eeheu/Documents/15.Lab/10.react/dbs-kbolog/src/main/frontend/src/page/Teampage/Teampage.js"],"sourcesContent":["import styles from \"./Teampage.module.css\";\r\nimport React, {useEffect, useState} from \"react\";\r\nimport Footer from \"../../components/_Layout/Footer\";\r\nimport Calendar from \"react-calendar\";\r\nimport \"react-calendar/dist/Calendar.css\";\r\n\r\nexport default function Teampage() {\r\n    const [team, setTeam] = useState([]);\r\n    const [backgroundColor, setBackgroundColor] = useState(\"#f0f0f0\");\r\n\r\n    const [gameData, setGameData] = useState([]);\r\n    const [selectedDate, setSelectedDate] = useState(new Date()); // 달력에서 선택된 날짜\r\n    const [gamesForSelectedDate, setGamesForSelectedDate] = useState([]); // 선택된 날짜의 경기 정보\r\n\r\n    useEffect(() => {\r\n        fetch(\"/api/my\")\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                setTeam(res.rootTeam)\r\n            })\r\n            .catch((err) => {\r\n                console.error(\"API fetch error:\", err); // 에러 처리\r\n            });\r\n        console.log(team)\r\n        switch (team.sponsor) {\r\n            case \"기아\":\r\n                setBackgroundColor(\"#F73600\"); // 기아의 배경색\r\n                break;\r\n            case \"두산\":\r\n                setBackgroundColor(\"#131230\"); // 두산의 배경색\r\n                break;\r\n            case \"삼성\":\r\n                setBackgroundColor(\"#074CA1\"); // 삼성의 배경색\r\n                break;\r\n            default:\r\n                setBackgroundColor(\"#f0f0f0\"); // 기본 배경색\r\n        }\r\n    }, [team.sponsor]);\r\n\r\n    useEffect(() => {\r\n        const selectedDate = new Date();\r\n\r\n        // 년, 월, 일만 추출\r\n        const year = selectedDate.getFullYear();\r\n        const month = selectedDate.getMonth(); // 월은 0부터 시작하므로 (예: 11월이면 10)\r\n\r\n        // 해당 월의 첫 날\r\n        const sf = new Date(year, month, 1);\r\n\r\n        // 해당 월의 마지막 날\r\n        const sgg = new Date(year, month + 1, 0); // 다음 월의 0일은 이전 월의 마지막 날\r\n\r\n        console.log('Start of Month:', sf.toLocaleDateString());\r\n        console.log('End of Month:', sgg.toLocaleDateString());\r\n        const startOfMonth = new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1);\r\n        const endOfMonth = new Date(selectedDate.getFullYear(), selectedDate.getMonth() + 1, 0);\r\n        console.log(startOfMonth)\r\n        fetch(`/api/game/${team.teamId}?start=${sf.toLocaleDateString()}&end=${endOfMonth.toISOString()}`)\r\n            .then((res) => res.json())\r\n            .then((data) => {\r\n                if (Array.isArray(data)) {\r\n                    setGameData(data); // 배열이면 그대로 상태에 저장\r\n                } else {\r\n                    setGameData([]); // 배열이 아니면 빈 배열로 설정\r\n                }// 서버에서 받은 경기 데이터 저장\r\n            })\r\n            .catch((err) => console.error(\"Failed to fetch game data:\", err));\r\n    }, [selectedDate, team.teamId]);\r\n\r\n    // 날짜가 선택되었을 때 해당 날짜의 경기 정보를 필터링하여 저장\r\n    useEffect(() => {\r\n        const selectedDateString = selectedDate.toISOString().split(\"T\")[0]; // 선택된 날짜의 yyyy-mm-dd 형식\r\n        const gamesOnSelectedDate = gameData.filter((game) => {\r\n            return game.gameDate === selectedDateString; // 경기가 선택된 날짜와 일치하는지 확인\r\n        });\r\n        setGamesForSelectedDate(gamesOnSelectedDate);\r\n    }, [selectedDate, gameData]);\r\n\r\n    return (\r\n        <div className={styles.default}>\r\n            <div className={styles.cropping}\r\n                 style={{backgroundColor: backgroundColor}}></div>\r\n                <div className={styles.inner}>\r\n                    <div className={styles.title}>{team.sponsor} 경기 일정</div>\r\n\r\n                    <div className={styles.calendarContainer}>\r\n                        <Calendar\r\n                            onChange={setSelectedDate} // 날짜 선택 핸들러\r\n                            value={selectedDate} // 현재 선택된 날짜\r\n                        />\r\n                    </div>\r\n\r\n                    <div className={styles.gameList}>\r\n                        <h3>{selectedDate.toLocaleDateString()} 경기를 확인하세요:</h3>\r\n                        {gamesForSelectedDate.length > 0 ? (\r\n                            <ul>\r\n                                {gamesForSelectedDate.map((game) => (\r\n                                    <li key={game.gameId}>\r\n                                        {game.homeTeam.teamName} vs {game.awayTeam.teamName} - {game.gameDate}\r\n                                    </li>\r\n                                ))}\r\n                            </ul>\r\n                        ) : (\r\n                            <p>이번 날짜에는 경기가 없습니다.</p>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n                <Footer/>\r\n            </div>\r\n            );\r\n            }\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}